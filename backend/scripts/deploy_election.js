const { ethers, run, network } = require("hardhat");
let cassandra = require('cassandra-driver');
require("dotenv").config()

async function deploy_contract() {
  client = get_db_conn()
  const abi = [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "duration_minutes",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ErrorMessage",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        }
      ],
      "name": "addCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_candidateIndex",
          "type": "uint256"
        }
      ],
      "name": "addVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "date_ends",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "date_starts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "electionName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVotingStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCandidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ]
  const bytecode = "";

  const provider = new ethers.JsonRpcProvider(process.env.ALCHEMY_API_KEY)

  const wallet = new ethers.Wallet(process.env.TESTNET_PRIVATE_KEY, provider);
  const query = `SELECT duration_minutes, election_name
              FROM election.poll
              WHERE user_public_key = '${wallet.address.toLowerCase()}'
              ORDER BY last_update_timestamp DESC
              LIMIT 1 ALLOW FILTERING;`
  try {
    const result = await client.execute(query);

    const poll_name = result.rows[0].election_name;
    const poll_duration = result.rows[0].duration_minutes;
    const Election = new ethers.ContractFactory(abi, bytecode, wallet)
    const el_contract = await Election.deploy(poll_name, poll_duration);
    const receipt = await el_contract.deploymentTransaction().wait(2);
    const contractAddress = receipt.contractAddress
    const res = await verifyContract(contractAddress, [poll_name, poll_duration]);
    console.log(`election contract will be deployed to address: ${contractAddress}`);
    console.log(`receipt for the contract deployment: ${receipt}`)
    if (!res) {
      throw new Error('Contract not varified.');
    }
    return contractAddress
  } catch (error) {
    console.error('Error executing query:', error);
  } finally {
    await closeConnection(client);
  }

  return contractAddress
}


function get_db_conn() {
  const keyspace = "election";
  let contactPoints = ['0.0.0.0'];
  let client = new cassandra.Client({
    contactPoints: contactPoints,
    keyspace: keyspace, localDataCenter:
      'datacenter1'
  });

  return client

}


async function main() {


  return deploy_contract()

}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});

async function closeConnection(client) {
  if (client) {
    return client.shutdown()
      .then(() => console.log('Cassandra connection closed.'))
      .catch(err => console.error('Error closing Cassandra connection:', err));
  } else {
    console.log('No active Cassandra connection to close.');
  }
}


async function verifyContract(address, args) {
  console.log("Verifying contract...");
  try {
    await run("verify:verify", {
      address: address,
      constructorArguments: args,
    });
    console.log("Contract verified successfully.");
    return true
  } catch (error) {
    if (error.message.toLowerCase().includes("already verified")) {
      console.log("Contract is already verified.");
      return true
    } else {
      console.error("Verification failed:", error);
      return false
    }
  }
}